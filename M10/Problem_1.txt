Activity2
public int count(int n) {

  if(n <= 6){

    return 0;

  }

  if(n%10 == 7){

    return 1 + count(n/10);

  }

  return count(n/10);

}

Answer the following question when count method is called with different parameters.

count(717)
ANS:2


count(7)
Ans:1


count(123)

Ans:0

count(47571)

Ans:2

count(99999)
Ans:0



Activity3

public int triangle(int rows) {

  if(rows == 0){

    return 0;

  }

  return rows + triangle(rows-1);

}

Answer the following question when triangle method is called with different parameters.

triangle(3)
Ans:6


triangle(2)
Ans:3


triangle(6)
Ans:21


triangle(4)
Ans:10


triangle(7)
Ans:28

Activity4

public int bunnyEars(int bunnies)

{

	if(bunnies == 0)

		return 0;

	if(bunnies % 2 == 1)

		return 2 + bunnyEars(bunnies-1);

	return 3 + bunnyEars(bunnies-1);

}

Answer the following question when bunnyEars method is called with different parameters.

bunnyEars(0)

Ans:0

bunnyEars(2)

Ans:5

bunnyEars(4)

Ans:10

bunnyEars(5)

Ans:12

bunnyEars(10)

Ans:25


public String endX(String str)

{

	if(str.length() == 0)

		return str;

	if(str.charAt(0) == 'x')

		return endX(str.substring(1)) + 'x';

	return str.charAt(0) + endX(str.substring(1));

}

Answer the following question when endX method is called with different parameters.

endX("xxre")
Ans:rexx

endX("xxhixx")

Ans:hixxxx


endX("xx") 

Ans:xx


end("bxx")


Ans:bxx

end("bxax")


Ans:baxx


Activity6

public String parenBit(String str)

{

	int len = str.length();

	if(str.charAt(0) != '(')

	{

		if(str.charAt(len - 1) != ')')

			return parenBit(str.substring(1, len -1));

		return parenBit(str.substring(1));

	}

	if(str.charAt(len - 1) != ')')

		return parenBit(str.substring(0, len - 1));

	return str;

}

Answer the following question when endX method is called with different parameters.

parenBit("xyz(abc)123")

Ans:(abc)

parenBit("(xy)1") 

Ans:(xy)

parenBit("hello(not really)there")

Ans:(not really)

parenBit("()") 

Ans:()

parenBit("res (ipsa) loquitor")

Ans:(ipsa)


Learning by doing-1
Given a non negative number n, return the factorial of n, which is n * (n-1) * (n-2)... 1. Compute the result recursively (without loops).

Answer the above problem in a file name problem-1.txt and add it to the folder ADS-1-practice/m10
Push the respository to GitHub when your answer is done
Enter the git commit ID in the blank below
Do not use eval to submit this activity

public int fact(int n)
{
	if(n==1)
	return 1;
	else
	return n*fact(n-1);
}

if n=5
Ans:120

Learning by doing-2
Given a string, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a "*".
Example:
pairStar("hello")---->"hel*lo"
pairStar("xxyy") ----> "x*xy*y"
pairStar("aaaa") ----> "a*a*a*a".

Answer the above problem in a file name problem-2.txt and add it to the folder ADS-1-practice/m10
Push the respository to GitHub when your answer is done
Enter the git commit ID in the blank below
Do not use eval to submit this activity


public class pairStar {
	
	static String pairStar(String str)
	{
	    if(str.length()==1||str.equals(""))
	        return str;
	    if(str.charAt(0)==str.charAt(1))
	        return str.charAt(0) + "*" + pairStar(str.substring(1));
	    
	    return str.charAt(0) + pairStar(str.substring(1));
	    
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s= pairStar("hello");
		System.out.println(s);
	}
}

Ans:
pairStar("hello")---->"hel*lo"
pairStar("xxyy") ----> "x*xy*y"
pairStar("aaaa") ----> "a*a*a*a".



Activity10

public static int fibonacci(int number){ 

if(number == 1){ 

return 1; 

}

else if(number == 2){

	return 2;

} 

return fibonacci(number-1) + fibonacci(number -2); 


In above code for number = 5 check how many times the fibonacci function is called

8
--------------------------- 





In above code for number = 10 check how many times the fibonacci function is called

72
--------------------------- 




public static int fibonacci(int number){

int fibValue=0;

if(number == 1 ){

return 1;

}else if(number == 2){

return 2;

}else if(fibArray[number]!=0){

return fibArray[number];

}else{

 fibValue=fibonacci(number-1)+fibonacci(number-2);

 fibArray[number]=fibValue;

 return fibValue;

}

}

In above code for number = 5 check how many times the fibonacci function is called


--------------------------- 


In above code for number = 10 check how many times the fibonacci function is called


--------------------------- 
